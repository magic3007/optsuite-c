import unittest
import sys
import numpy as np
import numpy.linalg as LA
import timeit
import torch

sys.path.append("${CMAKE_CURRENT_BINARY_DIR}/..")
from optpy.base import functional

sys.path.pop()


class MyTestCase(unittest.TestCase):
    def test_AxmbNormSqr(self):
        m, n, l = 512, 256, 2
        np.random.seed(114514)
        A = np.asfortranarray(np.random.randn(m, n))
        x = np.asfortranarray(np.random.randn(n, l))
        b = np.asfortranarray(np.random.randn(m, l))
        functor = functional.AxmbNormSqr_float64(A, b)

        temp = A @ x - b
        obj_ground = 0.5 * (temp ** 2).sum()
        grad_ground = A.T @ temp

        grad = np.asfortranarray(np.zeros_like(x))
        obj = functor(x, grad, True)
        np.testing.assert_allclose(obj, obj_ground)
        np.testing.assert_allclose(grad, grad_ground)

    def test_LogisticRegression(self):
        n, m = 256, 512
        np.random.seed(114514)
        A = np.asfortranarray(np.random.randn(n, m))
        b = np.asfortranarray(np.random.randn(m, 1))
        x = np.asfortranarray(np.random.randn(n, 1))
        functor = functional.LogisticRegression_float64(A, b)
        grad = np.zeros_like(x, order='F')
        obj = functor(x, grad, True)
        
        A_ = torch.from_numpy(A)
        b_ = torch.from_numpy(b)
        x_ = torch.from_numpy(x)
        x_.requires_grad = True
        obj_torch = torch.matmul((A_ * (- b_.transpose(0, 1))).transpose(0, 1), x_).exp().log1p().mean()
        obj_torch.backward()
        obj_ground = obj_torch.detach().numpy()
        grad_ground = x_.grad.detach().numpy()

        np.testing.assert_allclose(obj, obj_ground)
        np.testing.assert_allclose(grad, grad_ground)


def TimeAxmbNormSqr():
    m, n, l = 512, 256, 2
    A = np.asfortranarray(np.random.randn(m, n))
    x = np.asfortranarray(np.random.randn(n, l))
    b = np.asfortranarray(np.random.randn(m, l))
    functor = functional.AxmbNormSqr_float64(A, b)
    
    def numpy_impl():
        temp = A @ x - b
        obj_ground = 0.5 * (temp ** 2).sum()
        grad_ground = A.T @ temp
    
    def pybind_impl():
        grad = np.asfortranarray(np.zeros_like(x))
        obj = functor(x, grad, True)
    
    t = timeit.timeit(numpy_impl, number=100)
    print(f'Numpy average time: {t} sec')
    t = timeit.timeit(pybind_impl, number=100)
    print(f'Pybind average time: {t} sec')


if __name__ == '__main__':
    # TimeAxmbNormSqr()
    unittest.main()
